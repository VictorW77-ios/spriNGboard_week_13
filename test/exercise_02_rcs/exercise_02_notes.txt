Why are counter and counter_mutex being passed by reference to the threads?
--> 'counter' and 'counter_mutex' are passed by ref because we want the program to modify the containers as they're being incremented. 

How long (approximately) will it take the test to run?  Will it pass?
--> The program should run in O(3*N) time for all 3 threads, where N < num_times (num_times = 1,000) + 1ms, given the sleep() func. 

Will it pass?
--> Unsure about this! I think it will pass but I'm hesistant because the test case requires the counter == 3*num_times and I'm not sure how this'll translate with the exec running 3 threads separately at O(num_times), unless this issue is fixed by passing by reference and the counter's value ends up being 3*num_times. 

Do the outputs and times match your previous expectations?
--> Nope, but my expectations were somewhat correct. The test cases failed because the counter =/= 3*num_times. The times are interesting because the real time (0m1.077s) is higher than the user time (0m0.022s). Not to mention the sys time being 0m000s. 

Rebuild and rerun the code.  Does the test pass?
--> Yes, after implementing a lock_guard in the for loop the program runs and passes all test cases. 

How long does it take to run?
--> It takes 0m3.227s to run

Recompile and rerun the code.  Does the test pass?  
--> The program compiled and the test case passed (I orignally didn't have the lock_guard and increment operation properly isolated in their local scope but fixed it).

How long does it take to run?  
--> The real time was 0m1.079s. Substantially faster than before. 

What does this say about which code should be inside critical sections?
--> The lock_guard and increment operation are the most critical parts of the program functioning correctly. From the Sunday session and what I've read so far (cppreference - std::lock_guard), the scope really matters because lock_guard implements a mutex wrapper based on scope. By placing the critical stuff inside it's own block, we restrict the scope of the lock_guard and remove it from other uncritical behavior in the function. When control leaves the scope of the lock_guard, the mutex is released and the lock_guard is destructed (w/ unlock() ) - so it's important to declare the lock_guard in a scope that allows us to protect the mutex for however long we need to. 


